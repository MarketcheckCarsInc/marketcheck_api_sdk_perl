=begin comment

Marketcheck Cars API

<b>Access the New, Used and Certified cars inventories for all Car Dealers in US.</b> <br/>The data is sourced from online listings by over 44,000 Car dealers in US. At any time, there are about 6.2M searchable listings (about 1.9M unique VINs) for Used & Certified cars and about 6.6M (about 3.9M unique VINs) New Car listings from all over US. We use this API at the back for our website <a href='https://www.marketcheck.com' target='_blank'>www.marketcheck.com</a> and our Android and iOS mobile apps too.<br/><h5> Few useful links : </h5><ul><li>A quick view of the API and the use cases is depicated <a href='https://portals.marketcheck.com/mcapi/' target='_blank'>here</a></li><li>The Postman collection with various usages of the API is shared here https://www.getpostman.com/collections/2752684ff636cdd7bac2</li></ul>

OpenAPI spec version: 1.0.3

Generated by: https://github.com/swagger-api/swagger-codegen.git

=end comment

=cut

#
# NOTE: This class is auto generated by Swagger Codegen
# Please update the test cases below to test the API endpoints.
# Ref: https://github.com/swagger-api/swagger-codegen
#
use Test::More tests => 1; #TODO update number of test cases
use Test::Exception;

use lib 'lib';
use strict;
use warnings;

use_ok('WWW::SwaggerClient::HistoryApi');

my $api = WWW::SwaggerClient::HistoryApi->new();
isa_ok($api, 'WWW::SwaggerClient::HistoryApi');

#
# history test
#
my @vins = ("1FTEW1EF9GKE64460", "NM0LS7E78G1263750", "1FTNE1CM0FKA52494", "1FADP3N21FL364871", "1FTEW1EG1FFB24493");

{
    # my @reverse;
    # my @last_seen_at_dt;
    # my @scraped_at;
    # for my $vin_no (@vins) {
    #     my $vin = $vin_no;     # replace NULL with a proper value
    #     my $api_key = "ifQw00jC3LtQS4c4rfSbJOJFY7EmTvWP"; # replace NULL with a proper value
    #     my $fields = undef;  # replace NULL with a proper value
    #     my $page = undef;    # replace NULL with a proper value
    #     my $result = $api->history(vin => $vin, api_key => $api_key, fields => $fields, page => $page);
    #     # print @$result.last.keys($vin);
    #
    #     my  $hashValue;
    #     my $check;
    #
    #         for(my $i=0; $i < @$result; $i++) {
    #         $hashValue =  @$result[$i];
    #             @$last_seen_at_dt[$i] = $hashValue->{last_seen_at};
    #         #@reverse[$i] = sort reverse $last_seen_at_dt[$i];
    #          @reverse[$i] = push @last_seen_at_dt[$i];
    #     }
    #is(@reverse, sort reverse @last_seen_at_dt, 'history test');

    # foreach my $a (@$result[0]){
    #     print "$_\n";
    # # 0    print "scraped_at is - $a->{scraped_at}";
    # #     print "price is - $a->{price}";
    # #     print "miles is - $a->{miles}";
    # #     print "data_source is - $a->{data_source}";
    # #     print "vdp_url is - $a->{vdp_url}";
    # #     print "last_seen_at is - $a->{last_seen_at}";
    #
    #
    # }


    # for my $href (@$result[0]){
    #   print "$href->{id}\n";
    #         #@last_seen_at_dt = push $lst_seen;
    #
    # }
    # @reverse = sort reverse @last_seen_at_dt;
    # is($reverse[0], $last_seen_at_dt[0], 'history test');

    # for my $para(@reverse) {
    #     is($para, , 'message');
    # }

    # @reverse = sort reverse @last_seen_at_dt;
    # is(@reverse,@last_seen_at_dt,"history test")
    my @reverse;
    my @last_seen_at_dt;
    my @sort;
    for my $vin_no (@vins) {
        my $vin = $vin_no;                                # replace NULL with a proper value
        my $api_key = undef; # replace NULL with a proper value
        my $fields = undef;                               # replace NULL with a proper value
        my $page = undef;                                 # replace NULL with a proper value
        my $result = $api->history(vin => $vin, api_key => $api_key, fields => $fields, page => $page);
        my $hashValue;
        for (my $i = 0; $i < @$result; $i++) {
            $hashValue = @$result[$i];
            push(@last_seen_at_dt, $hashValue->{last_seen_at});
        }
        @sort = sort @last_seen_at_dt;
        @reverse = reverse @sort;
        is(@last_seen_at_dt, @reverse, 'validate history of vins');
    }
    for my $vin_no (@vins) {
        my $vin = $vin_no;                                # replace NULL with a proper value
        my $api_key = undef; # replace NULL with a proper value
        my $fields = "seller_type,inventory_type,is_searchable,dealer_id,source,data_source";                               # replace NULL with a proper value
        my $page = undef;                                 # replace NULL with a proper value
        my $result = $api->history(vin => $vin, api_key => $api_key, fields => $fields, page => $page);
        my @keys;
        my @fields =("seller_type","inventory_type","is_searchable","dealer_id","source","data_source");
        foreach my $hash (@$result){
            # print $hash->{seller_type},"\n";
            # print $hash->{inventory_type},"\n";
            # print $hash->{is_searchable},"\n";
            # print $hash->{dealer_id},"\n";
            # print $hash->{source},"\n";
            # print $hash->{data_source},"\n";
            is(exists $hash->{seller_type}, 1, 'Validate fields are returned when specified in fields param for multiple vins');
            is(exists $hash->{inventory_type}, 1, 'Validate fields are returned when specified in fields param for multiple vins');
            is(exists $hash->{is_searchable}, 1, 'Validate fields are returned when specified in fields param for multiple vins');
            is(exists $hash->{dealer_id}, 1, 'Validate fields are returned when specified in fields param for multiple vins');
            is(exists $hash->{source}, 1, 'Validate fields are returned when specified in fields param for multiple vins');
            is(exists $hash->{data_source}, 1, 'Validate fields are returned when specified in fields param for multiple vins');
        }
        #is(exists ("seller_type","inventory_type","is_searchable","dealer_id","source","data_source"),@keys,'Validate fields are returned when specified in fields param for multiple vins')
        #print @keys,"\n";
        # for (my $i =0;$i<@keys;$i++){
        #     print $keys[$i],"\n";
        # }
        #push(@last_seen_at_dt, $hashValue->{last_seen_at});
        # for (my $i = 0; $i < @$keys; $i++) {
        #     my $hashValue = @$keys[$i];
        #     print $hashValue,"\n";
        # }
    }
}

1;
